
COMMANDS AND IT'S DESCRIPTIONS:

git stages : 
1 : untracked files
2 : unmodified files
3 : Modified files
4 : Staged files

1 : git init 
=> Initialize .. git will handle tracking activities of this folder

2 : git status
=>git will show you all untracked files
untracked means git have no info about these file

3 : git add .
=>all files go to stagging and unmodified state

WHEN YOU MAKE CHANGES TO A FILE IT GOES TO MODIFIED STATE
THEN IF YOU RUN GIT ADD COMMAND IT BECOMEs STAGED FILES
NOW IF YOU RUN GIT COMMIT, ALL STAGED FILES ARE COMMITTED AND
GIT COMES TO UNMODIFIED STATE AND LOOKS FOR FURTHER CHANGED OR
MODIFICATIONS

4 : git reset head
=>if you want to reset all files from staging area and not ready for commit

5 : git reset HEAD "git notes.txt"
=> if you want to reset a single file from staging area and not ready for commit

6: git checkout OR git checkout "filename"
=> if you removed some code and you want it back in your file. This command will match/bring 
your file from last commit and give you same file as last commit.


7 : git diff
=>compare your current working directory to 
previously staged data

8 : git diff --staged
=>compare data of all stages of current working directory 
(show all changes in all stages)

9 : git commit -a -m "your comment here"
=>direct commit the file and didn't got to stagging (skip stagging and commit all files)
for direct commit all files have to be in staging area (tracked files) eg: git add <filename>



10 : git log
=>show me all the commits and it's comments information

battery info : powercfg/batteryreport